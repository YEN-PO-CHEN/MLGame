# -*- coding: utf-8 -*-
"""HW2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ho4LrHNwm67X68REGnkLqbgjcae9nna9

# Import
"""

import os
import pickle
import numpy as np
from sklearn.neighbors import KNeighborsClassifier

# DataPath = '/content/dataset'
# SavePath = '/content/drive/MyDrive/Colab Notebooks/AICS/PingPong/model/'
DataPath = '../log/'
SavePath = '../ml/'

"""# Unzip"""

# if not os.path.exists(DataPath):
# !unzip "/content/drive/MyDrive/Colab Notebooks/AICS/PingPong/log.zip" -d '/content/dataset'

"""# Feature Scaling"""

X_1P = np.array([[0, 0, 0, 0, 0, 0]])
Y_1P = np.array([])
X_2P = np.array([[0, 0, 0, 0, 0, 0]])
Y_2P = np.array([])
a = 0
for file_path in os.listdir(DataPath):
    with open(DataPath + file_path, 'rb') as f:
        data = pickle.load(f)
    # 提取特徵
    scene_info = data['ml_1P']['scene_info']
    command = data['ml_1P']['command']

    Ball_x = []
    Ball_y = []
    Ball_speed_x = []
    Ball_speed_y = []
    Platform_1P = []
    Platform_2P = []
    Command = []
    for i, s in enumerate(scene_info[1:-2]):
        Ball_x.append(s['ball'][0])
        Ball_y.append(s['ball'][1])
        Platform_1P.append(s['platform_1P'][0])
        Platform_2P.append(s['platform_2P'][0])
        Ball_speed_x.append(s['ball_speed'][0])
        Ball_speed_y.append(s['ball_speed'][1])

    for c in command[1:-2]:
        if c == "NONE":
            Command.append(0)
        elif c == "MOVE_LEFT":
            Command.append(-1)
        elif c == "MOVE_RIGHT":
            Command.append(1)

    numpy_data = np.array([Ball_x, Ball_y, Ball_speed_x, Ball_speed_y, Platform_1P, Platform_2P])
    X = np.transpose(numpy_data)
    y = Command

    X_1P = np.concatenate((X_1P, X))
    Y_1P = np.append(Y_1P, y)


    # 提取特徵
    scene_info = data['ml_2P']['scene_info']
    command = data['ml_2P']['command']

    Ball_x = []
    Ball_y = []
    Ball_speed_x = []
    Ball_speed_y = []
    Platform_1P = []
    Platform_2P = []
    Command = []
    for i, s in enumerate(scene_info[1:-2]):
        Ball_x.append(s['ball'][0])
        Ball_y.append(s['ball'][1])
        Platform_1P.append(s['platform_1P'][0])
        Platform_2P.append(s['platform_2P'][0])
        Ball_speed_x.append(s['ball_speed'][0])
        Ball_speed_y.append(s['ball_speed'][1])

    for c in command[1:-2]:
        if c == "NONE":
            Command.append(0)
        elif c == "MOVE_LEFT":
            Command.append(-1)
        elif c == "MOVE_RIGHT":
            Command.append(1)

    numpy_data = np.array([Ball_x, Ball_y, Ball_speed_x, Ball_speed_y, Platform_1P, Platform_2P])
    X = np.transpose(numpy_data)
    y = Command

    X_2P = np.concatenate((X_2P, X))
    Y_2P = np.append(Y_2P, y)

X_1P = np.delete(X_1P, 0, axis=0)
X_2P = np.delete(X_2P, 0, axis=0)
print("BUG", a)
print(len(Y_1P))
print(len(X_1P))
print(len(Y_2P))
print(len(X_2P))

model_1P = KNeighborsClassifier(n_neighbors=1)
model_2P = KNeighborsClassifier(n_neighbors=1)
print(model_1P.fit(X_1P, Y_1P))
print(model_1P.score(X_1P, Y_1P))
print(model_2P.fit(X_2P, Y_2P))
print(model_2P.score(X_2P, Y_2P))

"""# Write Pickle"""

with open(SavePath + 'model_1P.pickle', 'wb') as f:
    pickle.dump(model_1P, f)
with open(SavePath + 'model_2P.pickle', 'wb') as F:
    pickle.dump(model_2P, F)
